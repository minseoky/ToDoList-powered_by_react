[{"/Users/choiminseok/Git/todolist/src/index.js":"1","/Users/choiminseok/Git/todolist/src/App.js":"2","/Users/choiminseok/Git/ToDoList-powered_by_react/src/index.js":"3","/Users/choiminseok/Git/ToDoList-powered_by_react/src/App.js":"4"},{"size":188,"mtime":1674343386422,"results":"5","hashOfConfig":"6"},{"size":6022,"mtime":1674360005986,"results":"7","hashOfConfig":"6"},{"size":188,"mtime":1674343386422,"results":"8","hashOfConfig":"9"},{"size":10643,"mtime":1674651565309,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ubncom",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ak2f43",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/choiminseok/Git/todolist/src/index.js",[],[],[],"/Users/choiminseok/Git/todolist/src/App.js",["25","26","27","28","29","30"],[],"/Users/choiminseok/Git/ToDoList-powered_by_react/src/index.js",[],[],"/Users/choiminseok/Git/ToDoList-powered_by_react/src/App.js",["31","32","33","34","35"],[],"import styles from './style.module.css'\nimport {useState, useEffect, memo} from \"react\";\nimport Swal from \"sweetalert2\";\n\nconst bgImgs = [\"url('https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2144&q=80')\",\n    \"url('https://images.unsplash.com/photo-1480714378408-67cf0d13bc1b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80')\",\n    \"url('https://images.unsplash.com/photo-1513407030348-c983a97b98d8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2072&q=80')\"\n]\nlet bgIndex = Math.floor(Math.random()*3);\nfunction Clock(props) {\n    console.log('clock rerendered');\n    useEffect(() => {\n        clock();\n    }, [])\n    const clock = () => {\n        setInterval(() => {\n            props.setTimes([new Date().getHours(), new Date().getMinutes(), new Date().getSeconds()]);\n            modDayTime();\n        }, 1000);\n    }\n    const modDayTime = () => {\n        if(0 <= props.times[0] && props.times[0] < 6){\n            props.setDayTime(\"새벽\");\n        }\n        else if(6 <= props.times[0] && props.times[0] < 12){\n            props.setDayTime(\"아침\");\n        }\n        else if(12 <= props.times[0] && props.times[0] < 18){\n            props.setDayTime(\"오후\");\n        }\n        else{\n            props.setDayTime(\"밤\");\n        }\n    }\n\n\n    return(\n        <div className={styles.clock}>\n            {String(props.times[0]).padStart(2,'0')}:{String(props.times[1]).padStart(2,'0')}:{String(props.times[2]).padStart(2,'0')}\n        </div>\n    )\n}\nfunction LoginForm(props) {\n    console.log('loginform rerendered');\n    const [name, setName] = useState(\"\");\n    const onChange = (event) => {\n        setName(event.target.value);\n    }\n    const loginSubmit = (event) => {\n        if(name.length < 6){\n            event.preventDefault();\n            Swal.fire({icon:'success',title:'Welcome.',text:name});\n            localStorage.setItem(\"username\", name);\n            props.setUsername(name);\n\n        }\n\n        else{\n            event.preventDefault();\n            Swal.fire({icon:'error',title:'Your name is too long.',text:\"Try again within 5 characters.\"});\n            setName(\"\");\n        }\n    }\n    return(\n        <div className={styles.mainContainer}>\n            <form onSubmit={loginSubmit}>\n                <span className={styles.maintext}>좋은 {props.dayTime}입니다. </span>\n                <input className={styles.maintextInput} type={\"text\"} value={name} onChange={onChange} placeholder={\"Input your name\"}></input>\n            </form>\n        </div>\n    )\n}\nfunction AfterLogin(props) {\n    console.log('afterlogin rerendered');\n    const logout = () => {\n        localStorage.removeItem(\"username\");\n        Swal.fire({\n            title: 'Are you sure to log out?',\n            text: \"All of your data will be deleted.\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#FF3434',\n            cancelButtonColor: '#999',\n            confirmButtonText: 'Yes, Log out'\n        }).then((result) => {\n            if (result.isConfirmed) {\n                Swal.fire(\n                    'Log out',\n                    'Your data has been deleted.',\n                    'success'\n                )\n                localStorage.setItem(\"lists\", JSON.stringify([]));\n                props.setUsername(null);\n            }\n        })\n    }\n    return(\n        <div className={styles.mainContainer}>\n            <div className={styles.maintext}>\n                좋은 {props.dayTime}입니다. {props.username}\n                <button className={styles.logoutBtn} onClick={logout}>Log out</button>\n            </div>\n        </div>\n    )\n}\nfunction GithubMark() {\n    console.log('github mark rerendered');\n    return(\n        <div className={styles.by}>\n            by <a href={\"https://github.com/minseoky/ToDoList-powered_by_react\"} rel=\"noopener noreferrer\" target=\"_blank\">minseoky<img alt={\"github mark\"} className={styles.github} src=\"https://cdn-icons-png.flaticon.com/512/25/25231.png\"></img></a>\n        </div>\n    )\n}\nfunction TodoList(){\n    console.log('todolist rerendered');\n    const [newlist, setNewlist] = useState(\"\");\n    const [lists, setLists] = useState(JSON.parse(localStorage.getItem(\"lists\")));\n    const [editIndex, seteditIndex] = useState(0);\n    const [editing, setEditing] = useState(false);\n    const [inputValue, setInputvalue] = useState(\"\");\n    const onSubmit = (event) => {\n        event.preventDefault();\n        /* 새로운 목록과 checkbox check 상태를 리스트에 append */\n        setLists((prev) => [...prev, [newlist, false]])\n        setNewlist(\"\");\n    }\n    useEffect(() => {\n        localStorage.setItem(\"lists\", JSON.stringify(lists));\n    }, [lists])\n    const onChange = (event) => {\n        setNewlist(event.target.value);\n    }\n    const checkOnChange = (index, event) => {\n        let tempArr = [...lists];\n        tempArr[index][1] = !tempArr[index][1]; //set으로 바꿔야함\n        setLists(tempArr);\n        localStorage.setItem(\"lists\", JSON.stringify(lists));\n    }\n\n    const delbtnOnClick = (index, e) => {\n        Swal.fire({\n            title: 'Are you sure to delete this?',\n            text: \"your list will be disappeared.\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#FF3434',\n            cancelButtonColor: '#999',\n            confirmButtonText: 'Yes, delete it'\n        }).then((result) => {\n            if (result.isConfirmed) {\n                let tempArr = [...lists];\n                tempArr.splice(index, 1);\n                setLists(tempArr);\n                localStorage.setItem(\"lists\", JSON.stringify(lists));\n            }\n        })\n    }\n    const editbtnOnClick = (index, e) => {\n        setInputvalue(lists[index][0]); //선택한 todolist의 초기값 불러오기\n        seteditIndex(index);\n        setEditing(true);\n    }\n\n    const inputOnChange = (event) => {\n        setInputvalue(event.target.value);\n    }\n\n    const donebtnOnClick = (index, e) => {\n        let tempArr = [...lists];\n        tempArr[index][0] = inputValue;\n        setLists(tempArr);\n        setInputvalue(\"\");\n        setEditing(false);\n    }\n    return(\n        <div className={styles.todolist}>\n            <p>To Do List</p>\n            <div className={styles.todolistContainer}>\n                <form onSubmit={onSubmit}>\n                    <input type={\"text\"} className={styles.todolistInput} value={newlist} onChange={onChange} placeholder={\"write your list\"}/>\n                    <ul className={lists.length <= 6 ? styles.innerList : styles.innerListOverflow}>\n                        {lists.map((item,index) => {\n                            return (\n                                <div key={index}>\n                                    <li className={item[1] ? styles.checked : styles.unchecked}>\n                                        <div>\n                                            <input\n                                                type={\"checkbox\"}\n                                                onChange={(e)=>{checkOnChange(index, e)}}\n                                                checked={item[1]}\n                                                className={styles.check}>\n                                            </input>\n                                            {editIndex === index && editing === true ?\n                                                <input className={styles.editInput} type={\"text\"} onChange={inputOnChange} value={inputValue}></input>\n                                                : item[0]\n                                            }\n                                            {editing == true ?\n                                                null : <img alt={\"delete\"} className={styles.deleteBtn} onClick={(e) => delbtnOnClick(index,e)} src={\"https://cdn-icons-png.flaticon.com/512/3334/3334328.png\"}/>\n                                            }\n                                            {editIndex == index && editing == true ?\n                                                <img alt={\"done\"} className={styles.doneBtn} onClick={(e) => donebtnOnClick(index,e)} src={\"https://img.icons8.com/material-outlined/512/checked.png\"}/>\n                                                : <img alt={\"edit\"} className={styles.editBtn} onClick={(e) => editbtnOnClick(index,e)} src={\"https://img.icons8.com/material-outlined/512/pencil.png\"}/>\n                                            }\n\n\n                                        </div>\n                                    </li>\n                                </div>\n                            )\n                        })}\n                    </ul>\n                </form>\n            </div>\n        </div>\n    )\n}\nfunction ExceptClock(props){\n    return(\n        <div>\n            {props.username == null ?\n                <LoginForm dayTime={props.dayTime} username={props.username} setUsername={props.setUsername}/> :\n                <AfterLogin dayTime={props.dayTime} username={props.username} setUsername={props.setUsername}/>\n            }\n            {props.username == null ? null : <TodoList/>}\n            <GithubMark/>\n        </div>\n    )\n}\nconst NewExceptClock = memo(ExceptClock);\nfunction App() {\n    const [times, setTimes] = useState([new Date().getHours(), new Date().getMinutes(), new Date().getSeconds()]);\n    const [dayTime, setDayTime] = useState(\"\");\n    const [username, setUsername] = useState(null);\n\n    useEffect(() => {\n        //dayTime Default\n        if(0 <= times[0] && times[0] < 6){\n            setDayTime(\"새벽\");\n        }\n        else if(6 <= times[0] && times[0] < 12){\n            setDayTime(\"아침\");\n        }\n        else if(12 <= times[0] && times[0] < 18){\n            setDayTime(\"오후\");\n        }\n        else{\n            setDayTime(\"밤\");\n        }\n        if(localStorage.getItem(\"username\") !== null){\n            setUsername(localStorage.getItem(\"username\"));\n        }\n        if(localStorage.getItem(\"lists\") == null){\n            localStorage.setItem(\"lists\", JSON.stringify([]));\n        }\n    },[])\n    return (\n        <div\n            className={styles.background}\n            style={{backgroundImage: bgImgs[bgIndex]}}\n        >\n            <Clock times={times} setTimes={setTimes} dayTime={dayTime} setDayTime={setDayTime}/>\n            <NewExceptClock dayTime={dayTime} username={username} setUsername={setUsername}/>\n        </div>\n    );\n}\n\nexport default App;",{"ruleId":"36","severity":1,"message":"37","line":15,"column":11,"nodeType":"38","endLine":15,"endColumn":13,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":23,"column":26,"nodeType":"42","messageId":"43","endLine":23,"endColumn":28},{"ruleId":"36","severity":1,"message":"44","line":26,"column":8,"nodeType":"38","endLine":26,"endColumn":24,"suggestions":"45"},{"ruleId":"36","severity":1,"message":"46","line":26,"column":9,"nodeType":"47","endLine":26,"endColumn":23},{"ruleId":"48","severity":1,"message":"49","line":109,"column":16,"nodeType":"50","messageId":"51","endLine":109,"endColumn":72,"fix":"52"},{"ruleId":"53","severity":1,"message":"54","line":109,"column":80,"nodeType":"50","endLine":109,"endColumn":169},{"ruleId":"36","severity":1,"message":"55","line":14,"column":8,"nodeType":"38","endLine":14,"endColumn":10,"suggestions":"56"},{"ruleId":"40","severity":1,"message":"57","line":197,"column":54,"nodeType":"42","messageId":"43","endLine":197,"endColumn":56},{"ruleId":"40","severity":1,"message":"57","line":200,"column":56,"nodeType":"42","messageId":"43","endLine":200,"endColumn":58},{"ruleId":"40","severity":1,"message":"57","line":200,"column":76,"nodeType":"42","messageId":"43","endLine":200,"endColumn":78},{"ruleId":"36","severity":1,"message":"58","line":255,"column":7,"nodeType":"38","endLine":255,"endColumn":9,"suggestions":"59"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clock' and 'modDayTime'. Either include them or remove the dependency array.","ArrayExpression",["60"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'modDayTime' and 'props.dayTime'. Either include them or remove the dependency array.",["61"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"62","text":"63"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'clock'. Either include it or remove the dependency array.",["64"],"Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'times'. Either include it or remove the dependency array.",["65"],{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},[3863,3863]," rel=\"noreferrer\"",{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [clock, modDayTime]",{"range":"74","text":"75"},"Update the dependencies array to be: [modDayTime, props.dayTime]",{"range":"76","text":"77"},"Update the dependencies array to be: [clock]",{"range":"78","text":"79"},"Update the dependencies array to be: [times]",{"range":"80","text":"81"},[791,793],"[clock, modDayTime]",[1095,1111],"[modDayTime, props.dayTime]",[804,806],"[clock]",[10163,10165],"[times]"]